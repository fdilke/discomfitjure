(ns sprout.endovec-monoid
  (:use clojure.set sprout.endovec sprout.monoid sprout.my-oo)
)

(defn monoid-id
  "Build the unit element of a monoid expressed as equal-length endomorphisms"
  [M]
  (vec (range 0 (count (first M))))
)

(defn objectify-endovec-monoid [m-set]
  (monoid m-set (monoid-id m-set) mul-endovec)
)

(defn generate-endovecs
  "Find the monoid generated by the specified endovecs"
  [& evecs]
  (generate-monoid mul-endovec (normalize-endovecs evecs)) 
)

(defn endovec-monoid [& evecs]
  (let [m-set (generate-monoid mul-endovec (normalize-endovecs evecs))]
    (objectify-endovec-monoid m-set)
))

(defn symmetric-group [n]
    (apply endovec-monoid (cond 
        (= n 0)  []
        (= n 1)  [[0]]
        :default [[1 0] (conj (vec (range 1 n)) 0)]
)))

(defn all-endos [n]
  (objectify-endovec-monoid
    (all-endos-set n))
)
